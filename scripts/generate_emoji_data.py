#!/usr/bin/env python3
"""Generate compact Rust emoji metadata from the `emoji` and `emojis` packages."""

from __future__ import annotations

import argparse
import pathlib

import emoji
from emojis import db as emojis_db

CATEGORY_FLAG_ORDER: list[tuple[str, str]] = [
    ("Smileys & Emotion", "FLAG_SMILEYS_EMOTION"),
    ("Symbols", "FLAG_SYMBOLS"),
]
CATEGORY_TO_CONST: dict[str, str] = dict(CATEGORY_FLAG_ORDER)


def build_entries() -> list[tuple[int, str | None]]:
    entries: list[tuple[int, str | None]] = []
    for char, meta in emoji.EMOJI_DATA.items():  # type: ignore[attr-defined]
        if len(char) != 1:
            continue
        info = emojis_db.get_emoji_by_code(char)
        if info is None:
            info = emojis_db.get_emoji_by_code(f"{char}\ufe0f")
        category = info.category if info is not None else None
        entries.append((ord(char), category))
    entries.sort(key=lambda item: item[0])
    return entries


def emit(entries: list[tuple[int, str | None]]) -> str:
    flag_lines = [
        f"pub const {const_name}: u8 = 1 << {idx};"
        for idx, (_, const_name) in enumerate(CATEGORY_FLAG_ORDER)
    ]

    lines = [
        "// Auto-generated by scripts/generate_emoji_data.py; do not edit manually.",
        *flag_lines,
        "",
        "#[derive(Clone, Copy)]",
        "pub struct EmojiEntry {",
        "    pub code: u32,",
        "    pub flags: u8,",
        "}",
        "",
        "pub static EMOJI_DATA: &[EmojiEntry] = &[",
    ]
    for codepoint, category in entries:
        hex_code = f"0x{codepoint:04x}"
        if category is not None and category in CATEGORY_TO_CONST:
            flag_expr = CATEGORY_TO_CONST[category]
        else:
            flag_expr = "0"
        lines.append(f"    EmojiEntry {{ code: {hex_code}, flags: {flag_expr} }},")
    lines.append("];")
    lines.append("")
    return "\n".join(lines)


def main() -> None:
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--output",
        type=pathlib.Path,
        default=pathlib.Path("crates/fast-bunkai-rs/src/emoji_data.rs"),
        help="Path to the Rust source file to overwrite.",
    )
    args = parser.parse_args()

    entries = build_entries()
    content = emit(entries)
    args.output.write_text(content, encoding="utf-8")


if __name__ == "__main__":
    main()
